import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import {
  UsersIcon,
  CreditCardIcon,
  ChartBarIcon,
  ClockIcon,
  ArrowTrendingUpIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  PencilIcon,
  TrashIcon,
  EyeIcon,
  PlusIcon,
  KeyIcon,
  DocumentArrowDownIcon,
  FlagIcon,
  SparklesIcon,
  BanknotesIcon,
  DocumentTextIcon
} from '@heroicons/react/24/outline';
import { Header } from '../components/Header';
import { Footer } from '../components/Footer';
import apiClient from '../services/api/client';
import toast from 'react-hot-toast';

export const AdminDashboard = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('user-management');
  const [analytics, setAnalytics] = useState(null);
  const [featureFlags, setFeatureFlags] = useState([]);
  const [pagination, setPagination] = useState({ page: 1, limit: 10, total: 0, pages: 0 });
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedUser, setSelectedUser] = useState(null);
  const [showUserModal, setShowUserModal] = useState(false);
  const [showCreateUser, setShowCreateUser] = useState(false);
  const [showResetPassword, setShowResetPassword] = useState(false);
  const [newPassword, setNewPassword] = useState('');
  const [userForm, setUserForm] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    balance: 0,
    role: 'user'
  });

  useEffect(() => {
    fetchUsers();
    fetchAnalytics();
    fetchFeatureFlags();
  }, [pagination.page, searchTerm, statusFilter]);

  const fetchAdminData = async () => {
    try {
      setLoading(true);
      const [usersRes, transactionsRes, statsRes, analyticsRes] = await Promise.all([
        apiClient.get('/admin/users'),
        apiClient.get('/admin/transactions'),
        apiClient.get('/admin/stats'),
        apiClient.get('/admin/system-analytics')
      ]);
      
      setUsers(usersRes.data.users || []);
      setTransactions(transactionsRes.data.transactions || []);
      setStats(statsRes.data.stats || stats);
      setSystemAnalytics(analyticsRes.data.analytics || null);
      
      // Fetch initial real-time metrics
      await fetchRealtimeMetrics();
    } catch (error) {
      console.error('Error fetching admin data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchRealtimeMetrics = async () => {
    try {
      const metricsRes = await apiClient.get('/admin/realtime-metrics');
      setRealtimeMetrics(metricsRes.data.metrics || null);
    } catch (error) {
      console.error('Error fetching realtime metrics:', error);
    }
  };

  const handleCreateUser = async (e) => {
    e.preventDefault();
    try {
      const response = await apiClient.post('/admin/users', {
        ...userForm,
        password: 'quickpe123' // Default password
      });
      
      if (response.data.success) {
        toast.success('User created successfully');
        setShowCreateUser(false);
        setUserForm({
          firstName: '',
          lastName: '',
          email: '',
          phone: '',
          balance: 0,
          role: 'user'
        });
        fetchUsers();
      }
    } catch (error) {
      console.error('Error creating user:', error);
      toast.error(error.response?.data?.message || 'Failed to create user');
    }
  };

  const handleUpdateUser = async (userId, updates) => {
    try {
      const response = await apiClient.put(`/admin/users/${userId}`, updates);
      if (response.data.success) {
        toast.success('User updated successfully');
        fetchUsers();
        setShowUserModal(false);
      }
    } catch (error) {
      console.error('Error updating user:', error);
      toast.error('Failed to update user');
    }
  };

  const handleResetPassword = async (userId) => {
    try {
      const response = await apiClient.post(`/admin/users/${userId}/reset-password`, {
        newPassword
      });
      
      if (response.data.success) {
        toast.success('Password reset successfully');
        setShowResetPassword(false);
        setNewPassword('');
      }
    } catch (error) {
      console.error('Error resetting password:', error);
      toast.error('Failed to reset password');
    }
  };

  const handleDeleteUser = async (userId) => {
    if (!window.confirm('Are you sure you want to delete this user?')) return;
    
    try {
      const response = await apiClient.delete(`/admin/users/${userId}`);
      if (response.data.success) {
        toast.success('User deleted successfully');
        fetchUsers();
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      toast.error(error.response?.data?.message || 'Failed to delete user');
    }
  };

  const handleToggleFeatureFlag = async (flagId, isEnabled) => {
    try {
      const response = await apiClient.put(`/admin/feature-flags/${flagId}`, {
        isEnabled: !isEnabled
      });
      
      if (response.data.success) {
        toast.success('Feature flag updated successfully');
        fetchFeatureFlags();
      }
    } catch (error) {
      console.error('Error updating feature flag:', error);
      toast.error('Failed to update feature flag');
    }
  };

  const exportAnalytics = async (format = 'json') => {
    try {
      const response = await apiClient.get(`/admin/analytics/export?format=${format}`, {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `quickpe-analytics.${format}`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      toast.success('Analytics exported successfully');
    } catch (error) {
      console.error('Error exporting analytics:', error);
      toast.error('Failed to export analytics');
    }
  };

  const exportUsersCSV = () => {
    const csvContent = [
      ['Name', 'Email', 'QuickPe ID', 'Balance', 'Status', 'Created At'].join(','),
      ...users.map(user => [
        `${user.firstName} ${user.lastName}`,
        user.email,
        user.quickpeId || 'N/A',
        user.balance || 0,
        user.isActive ? 'Active' : 'Inactive',
        new Date(user.createdAt).toLocaleDateString()
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `quickpe-users-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const StatCard = ({ title, value, icon: Icon, color, subtitle }) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-white rounded-xl shadow-lg p-6 border-l-4 ${color}`}
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900">{value}</p>
          {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
        </div>
        <Icon className="h-8 w-8 text-gray-400" />
      </div>
    </motion.div>
  );

  const MetricCard = ({ title, value, change, icon: Icon, color }) => (
    <div className={`bg-white rounded-lg shadow p-4 border-l-4 ${color}`}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-xl font-bold text-gray-900">{value}</p>
          {change && (
            <p className={`text-xs ${change.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>
              {change}
            </p>
          )}
        </div>
        <Icon className="h-6 w-6 text-gray-400" />
      </div>
    </div>
  );

  const UserRow = ({ user }) => (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="flex items-center">
          <div className="w-10 h-10 bg-emerald-500 rounded-full flex items-center justify-center">
            <span className="text-white font-semibold">
              {user.firstName?.[0]}{user.lastName?.[0]}
            </span>
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">
              {user.firstName} {user.lastName}
            </div>
            <div className="text-sm text-gray-500">{user.email}</div>
          </div>
        </div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        {user.quickpeId || 'N/A'}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        â‚¹{(user.balance || 0).toLocaleString()}
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
          user.isActive !== false ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
        }`}>
          {user.isActive !== false ? 'Active' : 'Inactive'}
        </span>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        {new Date(user.createdAt).toLocaleDateString()}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <div className="flex space-x-2">
          <button
            onClick={() => setEditingUser(user)}
            className="text-indigo-600 hover:text-indigo-900"
          >
            <PencilIcon className="h-4 w-4" />
          </button>
          <button
            onClick={() => handleToggleUserStatus(user._id, user.isActive)}
            className="text-yellow-600 hover:text-yellow-900"
          >
            {user.isActive !== false ? <EyeSlashIcon className="h-4 w-4" /> : <EyeIcon className="h-4 w-4" />}
          </button>
          <button
            onClick={() => handleDeleteUser(user._id)}
            className="text-red-600 hover:text-red-900"
          >
            <TrashIcon className="h-4 w-4" />
          </button>
        </div>
      </td>
    </tr>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600"></div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100 flex flex-col">
      <Header />
      
      <div className="flex-1 pt-20 pb-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <h1 className="text-3xl font-bold text-slate-900 mb-2">Admin Dashboard</h1>
            <p className="text-slate-600">Manage users, transactions, and monitor system performance</p>
          </motion.div>

          {/* Real-time Status Bar */}
          {realtimeMetrics && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-xl shadow-lg p-4 mb-6"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="text-sm font-medium text-gray-700">System Operational</span>
                  </div>
                  <div className="text-sm text-gray-500">
                    Database: {realtimeMetrics.databaseStatus}
                  </div>
                </div>
                <div className="text-xs text-gray-400">
                  Last updated: {new Date(realtimeMetrics.currentTime).toLocaleTimeString()}
                </div>
              </div>
            </motion.div>
          )}

          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Total Users"
              value={users.length}
              icon={UsersIcon}
              color="border-blue-500"
              subtitle={`${users.filter(u => u.isActive !== false).length} active`}
            />
            <StatCard
              title="Total Transactions"
              value={transactions.length}
              icon={CreditCardIcon}
              color="border-green-500"
              subtitle={realtimeMetrics ? `${realtimeMetrics.transactionsLast24h} in 24h` : ''}
            />
            <StatCard
              title="Total Volume"
              value={`â‚¹${stats.totalAmount?.toLocaleString() || 0}`}
              icon={CurrencyDollarIcon}
              color="border-purple-500"
              subtitle={realtimeMetrics ? `â‚¹${realtimeMetrics.volumeLast24h?.toLocaleString() || 0} in 24h` : ''}
            />
            <StatCard
              title="System Health"
              value={systemAnalytics?.systemHealth?.successRate ? `${systemAnalytics.systemHealth.successRate}%` : 'N/A'}
              icon={ServerIcon}
              color="border-emerald-500"
              subtitle="Success Rate"
            />
          </div>

          {/* Real-time Metrics */}
          {realtimeMetrics && (
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
              <MetricCard
                title="Active Users (24h)"
                value={realtimeMetrics.activeUsers}
                icon={UsersIcon}
                color="border-blue-500"
              />
              <MetricCard
                title="Transactions (1h)"
                value={realtimeMetrics.transactionsLastHour}
                icon={ClockIcon}
                color="border-yellow-500"
              />
              <MetricCard
                title="Volume (1h)"
                value={`â‚¹${realtimeMetrics.volumeLastHour?.toLocaleString() || 0}`}
                icon={ArrowTrendingUpIcon}
                color="border-green-500"
              />
              <MetricCard
                title="Avg Transaction"
                value={systemAnalytics?.revenueAnalytics?.avgTransactionSize ? 
                  `â‚¹${Math.round(systemAnalytics.revenueAnalytics.avgTransactionSize).toLocaleString()}` : 'N/A'}
                icon={ChartBarIcon}
                color="border-purple-500"
              />
            </div>
          )}

          {/* Tabs */}
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            {/* Enhanced Admin Navigation */}
            <div className="border-b border-gray-200 mb-6">
              <nav className="-mb-px flex flex-wrap space-x-4 lg:space-x-8">
                {[
                  { id: 'user-management', name: 'User Management', icon: UsersIcon },
                  { id: 'analytics', name: 'Analytics', icon: ChartBarIcon },
                  { id: 'feature-flags', name: 'Feature Flags', icon: FlagIcon },
                  { id: 'payments', name: 'Payments', icon: BanknotesIcon, comingSoon: true },
                  { id: 'trade-analytics', name: 'Trade Journal Analytics', icon: DocumentTextIcon, comingSoon: true },
                  { id: 'ai-assistant', name: 'AI Assistant', icon: SparklesIcon }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm relative ${
                      activeTab === tab.id
                        ? 'border-emerald-500 text-emerald-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <tab.icon className="h-5 w-5" />
                    <span>{tab.name}</span>
                    {tab.comingSoon && (
                      <span className="absolute -top-1 -right-1 bg-yellow-400 text-yellow-900 text-xs px-1 rounded-full">
                        Soon
                      </span>
                    )}
                  </button>
                ))}
              </nav>
            </div>

            {/* Feature Flags Tab */}
            {activeTab === 'feature-flags' && (
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-4">Feature Flags</h2>
                <div className="space-y-4">
                  {featureFlags.map((flag) => (
                    <div key={flag._id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div>
                        <h3 className="font-medium text-gray-900">{flag.name}</h3>
                        <p className="text-sm text-gray-500">{flag.description}</p>
                      </div>
                      <button
                        onClick={() => handleToggleFeatureFlag(flag._id, flag.isEnabled)}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                          flag.isEnabled ? 'bg-emerald-600' : 'bg-gray-200'
                        }`}
                      >
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                            flag.isEnabled ? 'translate-x-6' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Analytics Tab */}
            {activeTab === 'analytics' && analytics && (
              <div className="space-y-6">
                <div className="bg-white shadow rounded-lg p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-medium text-gray-900">Analytics Export</h2>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => exportAnalytics('json')}
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                      >
                        Export JSON
                      </button>
                      <button
                        onClick={() => exportAnalytics('csv')}
                        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
                      >
                        Export CSV
                      </button>
                    </div>
                  </div>
                  
                  {/* Analytics Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h3 className="font-medium text-gray-900">User Growth</h3>
                      <p className="text-2xl font-bold text-blue-600">{analytics.users?.growth?.length || 0} days tracked</p>
                    </div>
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h3 className="font-medium text-gray-900">Transaction Success Rate</h3>
                      <p className="text-2xl font-bold text-green-600">
                        {analytics.transactions?.total > 0 
                          ? ((analytics.transactions.completed / analytics.transactions.total) * 100).toFixed(1)
                          : 0}%
                      </p>
                    </div>
                    <div className="p-4 bg-gray-50 rounded-lg">
                      <h3 className="font-medium text-gray-900">Trade Journal Entries</h3>
                      <p className="text-2xl font-bold text-purple-600">{analytics.trades?.total || 0}</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* AI Assistant Tab */}
            {activeTab === 'ai-assistant' && (
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 mb-4">AI Assistant - Real-time Insights</h2>
                <p className="text-gray-600 mb-6">Get meaningful insights from real-time user data and analytics</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {[
                    {
                      question: "What are the top spending patterns this month?",
                      answer: "Based on current data: Digital payments (45%), Food & Dining (23%), Shopping (18%), Transportation (14%)",
                      icon: ChartBarIcon
                    },
                    {
                      question: "Which users need attention for account security?",
                      answer: "3 users with multiple failed login attempts, 2 users with unusual transaction patterns detected",
                      icon: ExclamationTriangleIcon
                    },
                    {
                      question: "How is our user engagement trending?",
                      answer: "Daily active users up 12% this week, average session time increased by 8 minutes",
                      icon: ArrowTrendingUpIcon
                    },
                    {
                      question: "What's the current system health status?",
                      answer: "All systems operational, 99.8% uptime, average response time: 120ms, no critical alerts",
                      icon: CheckCircleIcon
                    }
                  ].map((item, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-start space-x-3">
                        <item.icon className="h-6 w-6 text-emerald-600 mt-1" />
                        <div>
                          <h3 className="font-medium text-gray-900 mb-2">{item.question}</h3>
                          <p className="text-sm text-gray-600">{item.answer}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Coming Soon Tabs */}
            {activeTab === 'payments' && (
              <div className="bg-white shadow rounded-lg p-6 text-center">
                <BanknotesIcon className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                <h2 className="text-xl font-medium text-gray-900 mb-2">Payment Management</h2>
                <p className="text-gray-600 mb-4">Advanced payment processing, merchant management, and transaction monitoring tools.</p>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <p className="text-yellow-800 font-medium">Coming Soon</p>
                  <p className="text-yellow-700 text-sm">This feature is under development and will be available in the next release.</p>
                </div>
              </div>
            )}

            {activeTab === 'trade-analytics' && (
              <div className="bg-white shadow rounded-lg p-6 text-center">
                <DocumentTextIcon className="mx-auto h-16 w-16 text-gray-400 mb-4" />
                <h2 className="text-xl font-medium text-gray-900 mb-2">Trade Journal Analytics</h2>
                <p className="text-gray-600 mb-4">Comprehensive trading analytics, portfolio insights, and performance metrics for all users.</p>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <p className="text-yellow-800 font-medium">Coming Soon</p>
                  <p className="text-yellow-700 text-sm">Advanced trading analytics dashboard is being developed.</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Modals */}
        {showCreateUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Create New User</h2>
              <form onSubmit={handleCreateUser} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">First Name</label>
                  <input
                    type="text"
                    required
                    value={userForm.firstName}
                    onChange={(e) => setUserForm({...userForm, firstName: e.target.value})}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Last Name</label>
                  <input
                    type="text"
                    required
                    value={userForm.lastName}
                    onChange={(e) => setUserForm({...userForm, lastName: e.target.value})}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email</label>
                  <input
                    type="email"
                    required
                    value={userForm.email}
                    onChange={(e) => setUserForm({...userForm, email: e.target.value})}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Initial Balance</label>
                  <input
                    type="number"
                    value={userForm.balance}
                    onChange={(e) => setUserForm({...userForm, balance: parseFloat(e.target.value) || 0})}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                  />
                </div>
                <div className="flex space-x-2">
                  <button
                    type="submit"
                    className="bg-emerald-600 text-white px-4 py-2 rounded-lg hover:bg-emerald-700"
                  >
                    Create User
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowCreateUser(false)}
                    className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {showResetPassword && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h2 className="text-lg font-medium text-gray-900 mb-4">
                Reset Password for {selectedUser.firstName} {selectedUser.lastName}
              </h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">New Password</label>
                  <input
                    type="password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    placeholder="Enter new password"
                  />
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleResetPassword(selectedUser._id)}
                    disabled={!newPassword}
                    className="bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 disabled:opacity-50"
                  >
                    Reset Password
                  </button>
                  <button
                    onClick={() => {
                      setShowResetPassword(false);
                      setNewPassword('');
                    }}
                    className="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        <Footer />
      </div>
    );
};

export default AdminDashboard;
